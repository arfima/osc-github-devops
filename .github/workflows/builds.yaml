---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2024 The Linux Foundation <https://linuxfoundation.org>

name: "ðŸ§± Python Builds (Matrix)"

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:

jobs:
  get-python-versions:
    runs-on: ubuntu-latest
    outputs:
      MATRIX: ${{ steps.parse-project-metadata.outputs.matrix }}

    steps:
      # yamllint disable-line rule:line-length
      - uses: os-climate/devops-reusable-workflows/.github/workflows/pyproject-toml-fetch-matrix.yaml@main
        id: parse-project-metadata

  perform-builds:
    runs-on: ubuntu-latest
    needs: [get-python-versions]
    continue-on-error: true
    strategy:
      fail-fast: false
      # matrix: ${{ fromJson(needs.get-python-versions.outputs.matrix) }}
    env:
      MATRIX: ${{ fromJson(needs.get-python-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: "Populate environment variables"
        id: setenv
        run: |
          echo "Action triggered by user: ${GITHUB_TRIGGERING_ACTOR}"
          set -x
          datetime=$(date +'%Y%m%d%H%M')
          export datetime
          echo "datetime=${datetime}" >> "$GITHUB_OUTPUT"
          vernum="${{ env.MATRIX }}.${datetime}"
          echo "vernum=${vernum}" >> "$GITHUB_OUTPUT"

      - name: "Set up Python ${{ env.MATRIX }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.MATRIX }}

      - name: "Setup PDM for build commands"
        uses: pdm-project/setup-pdm@v4
        with:
          python-version: ${{ env.MATRIX }}

      - name: "Tag for test release"
        # Delete all local tags, then create a synthetic tag for testing
        # Use the date/time to avoid conflicts uploading to Test PyPI
        run: |
          scripts/dev-versioning.sh "${{ steps.setenv.outputs.vernum }}"
          git tag | xargs -L 1 | xargs git tag --delete
          git tag "v${{ steps.setenv.outputs.vernum }}"
          git checkout "tags/v${{ steps.setenv.outputs.vernum }}"
          grep version pyproject.toml

      - name: "Performing build"
        run: |
          python -m pip install --upgrade pip
          if [ -f tox.ini ]; then
            pip install tox tox-gh-actions
            echo "Found file: tox.ini"
            echo "Building with command: tox -e build"
            tox -e build
          elif [ -f pyproject.toml ]; then
            echo "Found file: pyproject.toml"
            echo "Building with command: pdm build"
            pdm build
          else
            echo "Neither file found: tox.ini/pyproject.toml"
            pip install --upgrade build
            echo "Attempting build with: python -m build"
            python -m build
          fi

      - name: "Validating Artefacts with Twine"
        run: |
          echo "Validating artefacts with: twine check dist/*"
          pip install --upgrade twine
          twine check dist/*
